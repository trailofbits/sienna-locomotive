""" Module handling !exploitable (with autoit)
    !exploitable dll (MSEC.dll) has to be installed in
    DEBUG_PATH\\winext
    Example:
    C:\\Program Files\\Windows Kits\\10\\Debuggers\\x86\\winext"
    or
    C:\\Program Files\\Windows Kits\\10\\Debuggers\\x64\\winext"
    """

import subprocess
import os

AUTOIT_BIN = ""
WINGDB_PATH = ""
# cdb.exe: user mode debuger with command line interface
DEBUG = "cdb.exe"

# Run the program, load the MSEC dll, run !exploitable and quit
WINGDB_CMD = r"g;!load winext\MSEC.dll;!exploitable;q"


def run(autoit_script, path_program, program_name, parameters):
    """
    Run !exploitable with an auto it script
    Args:
        autoit_script (string): path the to script
        path_program (string): path the to the program
        program_name (string): name of the program
        parameters (string list): parameters of the script
    Returns:
        string: exploitability verdict
    """
    cmd = [WINGDB_PATH + DEBUG, "-c", WINGDB_CMD,
           os.path.join(path_program, program_name)] + parameters
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)

    # TODO JF: find a better way to handle to include the right "libfuzz.au3"
    autoit_script = autoit_script[:-4] + "-wingdb.au3"
    cmd_auto_it = [AUTOIT_BIN, autoit_script] + parameters
    proc_auto_it = subprocess.Popen(cmd_auto_it)

    classification = "Not found"
    for line in iter(proc.stdout.readline, b''):
        # detect when !exploitable analysis starts
        print line
        if line.startswith("!exploitable "):
            break
    for line in iter(proc.stdout.readline, b''):
        if line.startswith("Exploitability Classification:"):
            classification = line.rstrip()[30:]
    proc.wait()
    return classification
