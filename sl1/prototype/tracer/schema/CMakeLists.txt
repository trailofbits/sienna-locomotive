cmake_minimum_required (VERSION 3.0)

find_package (Protobuf REQUIRED)

list (APPEND PROTO_FLAGS -I${CMAKE_CURRENT_SOURCE_DIR})

set (PROTO_SRC Trace.proto)

set(PROTO_META_BASE_DIR "${CMAKE_CURRENT_BINARY_DIR}" PARENT_SCOPE)
set(PROTO_META_BASE_DIR "${CMAKE_CURRENT_BINARY_DIR}")

include_directories(${PROTO_META_BASE_DIR})

set_source_files_properties (${PROTO_SRC} ${PROTO_HEADER} PROPERTIES
     GENERATED TRUE)

set (PROTO_GENERATED_SOURCES PARENT_SCOPE)

message (STATUS "${PROTOBUF_PROTOC_EXECUTABLE} ${PROTO_FLAGS} --cpp_out='${PROTO_META_BASE_DIR}' ${CMAKE_CURRENT_SOURCE_DIR}/${PROTO}")

foreach (PROTO ${PROTO_SRC})
  get_filename_component(PROTO_BASENAME ${PROTO} NAME_WE)

  execute_process(
    COMMAND ${PROTOBUF_PROTOC_EXECUTABLE} ${PROTO_FLAGS} --cpp_out=${PROTO_META_BASE_DIR} --python_out=${PROTO_META_BASE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/${PROTO}

    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  )

  list (APPEND PROTO_GENERATED_SOURCES ${PROTO_BASENAME}.pb.cc)
endforeach()

add_library (schema ${PROTO_GENERATED_SOURCES})

